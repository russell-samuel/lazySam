#!/bin/bash

################################ Debug Console ################################
# Read commands but do not execute them.
# set -n

# Print commands and their arguments as they are executed
# set -x


# Treat unset variables as an error when substituting.
set -u

# Exit immediately if a command exits with a non-zero status.
set -e

# Set the variable corresponding to option-name:
# -o pipefail: the return value of a pipeline is the status of the last
#              command to exit with a non-zero status, or zero if no
#              command exited with a non-zero status
set -o pipefail


#================================ Update Log ======================================

version_number="0.0.1"

# 0.0.1
#
# ====== variables ======

script_name=$(basename -s .sh $0)

print_help(){
  cat << EOF
Description:

  prettify the floats

Usage:

  ${script_name} [OPTION] [--] FLOAT [FLOAT] ...

Option:

  -h, --help                show this help
  -v, --version             print version
  -s, --sep SEP:str         output separator
  -d, --dec DEC:int         specify output decimal places
  -n, --no-trail-zero       remove trailing zeros
  -t, --truncate            directly trancate rather than rounding
                               
Example:
  ${script_name} 1 .3  0.3   1.
  # the output of this example is 1 0.3 0.3 1.

Note:
  The '--' can NOT be ignored if there are NEGATIVE inputs,
  and all input floats must behind '--' and all options 
  placed before '--' in this case

EOF
}

print_version(){
  cat << EOF
  ${script_name} ${version_number}
EOF
}

dec=''
inputs=''
set_sep=false
set_dec=false
rm_trail_zero=false
is_truncate=false

short_options="h,v,s:,d:,n,t"
long_options="help,version,sep:,dec:,no-trail-zero"

# parse arguments
arguments=$(getopt -n ${script_name} --alternative\
  --options     ${short_options} \
  --longoptions ${long_options} -- "$@" )
# exit if getopt failed
[ $? -ne 0 ] && exit 1
# send parsed arguments as input arguments
eval set -- "${arguments}"

while [ -n "$1" ];
do
  case $1 in
    -h|--help)    print_help;                            exit 0 ;;
    -v|--version) print_version;                         exit 0 ;;
    -s|--sep)             sep=$2; set_sep=true;         shift 2 ;;
    -d|--dec)             dec=$2; set_dec=true;         shift 2 ;;
    -n|--no-trail-zero)   rm_trail_zero=true;           shift   ;;
    -t|--truncate)        is_truncate=true;             shift   ;;
    --)           shift;  inputs=${@};                   break  ;;
    *)            echo "$1 is not a recognized option!"; exit 1 ;;
  esac
done

function prettify_float() {
  local float=$1
# integer with a decimal point
  local int_w_p=false
  total_count=$(printf '%s' ${float} | wc -c)
  decimal_count=$(printf '%s' ${float#*.} | wc -c)
  echo ${float} | grep '\.' &> /dev/null
  if [ "$?" != 0 ]; then
# if there is no decimal point (an integer)
    decimal_count=0
  else
# exit if there is only a decimal point
    [ "${total_count}" == '1' ] && \
    echo "There is a stand-alone decimal point" 3>&1 1>&2 2>&3 \
    && return 2
# if the decimal point is located at the last
    echo ${float} | grep '[0-9]\+\.$' &> /dev/null
    [ "$?" == 0 ] && decimal_count=0 && int_w_p=true
  fi
  local fmt="%0.${decimal_count}f"
  prettier_float=$(printf "$fmt" $float)
  [ "$int_w_p" == 'true' ] && prettier_float+='.'
  echo $prettier_float
}

# check input is not empty
if [ -z "${inputs}" ]; then
  print_help
  exit 1
fi

if $is_truncate; then
  if [ -z "$dec" ]; then
    print_help
    echo "'-t/--truncate' should be used only after the decimal place is specified by '-d/--dec' option"
    exit 1
  else
    dec=$[ $dec +1 ]
  fi
fi

# if $set_dec && $rm_trail_zero; then
#   echo "These options are conflicted: '-d/--dec' and  '-t/--trail'"
#   exit 1
# fi

# pre-processing of inputs
floats=''
for input in ${inputs[@]}; do
  floats+="$(prettify_float $input) "
done

# set decimal places
if $set_dec; then
  tmp_floats=''
  for float in ${floats[@]}; do
    tmp_float="$(printf "%.${dec}f" $float)"
    if $is_truncate; then
      tmp_floats+="${tmp_float%[0-9]} "
    else
      tmp_floats+="$tmp_float "
    fi
  done
  floats=${tmp_floats}
  unset tmp_floats
fi

# remove trailing zeros
if $rm_trail_zero; then
  tmp_floats=''
  for float in ${floats[@]}; do
    # 0.02300 -> 0.23
    tmp_float="$(printf "%s" $float | sed 's/\(.*[1-9]\)0*/\1/') "
    # 10.00 -> 10.
    tmp_float="$(printf "%s" $tmp_float | sed 's/\(.*\.\)0*/\1/') "
    # 10. -> 10
    #tmp_float="$(printf "%s" $tmp_float | sed 's/\(.*\)\.$/\1/') "

    tmp_floats+="$tmp_float "
  done
  floats=${tmp_floats}
  unset tmp_floats
fi

# output
if $set_sep; then
  echo $floats | sed "s/ /${sep}/"
else
  echo $floats
fi
