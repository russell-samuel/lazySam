#!/bin/sh

#================================ 更新日志 ======================================
# 此脚本的版本号
version_number="0.0.1"

# 0.0.1
# 实现了-c注释tag，-u取消注释tag，-m修改tag

# ====== variables ======

# 输入文件
input_file="INCAR"

# 此脚本的名称
script_name=$(basename -s .sh $0)

# 是否打印输出信息
flag_suppress_comment_info="false"
flag_suppress_modified_info="false"
flag_suppress_unrecognized_info="false"

# 操作失败的tags
missing_comment_tags=""
missing_uncomment_tags=""
missing_modify_tags=""

# 设置短选项、长选项的格式
short_options="h,v,c:,u:,i:,q,m"
long_options="help,version,comment:,uncomment:,input:,quite,modify"

# 解析命令行参数
arguments=$(getopt -n ${script_name} --options ${short_options} \
  --longoptions ${long_options} -- "$@" )
# getopt退出码不为0（有错误），则不继续执行
[ $? -ne 0 ] && exit 1
# eval、set 还没搞懂作用，这里放到后面的main函数中去了，这里可以不写了
# eval set -- "${arguments}"

# ====== funcitons ======

get_tags(){
  # 反正加上eval set后输出就不会有引号出现
  eval set -- "$@"
  while [ -n "$1" ]; 
  do
    case $1 in
      -h|--help)
        print_help
        exit 0
      ;;
      -v|--version)
        print_version
        exit 0
      ;;
      -c|--comment)
        comment_tags=${2}
        shift
      ;;
      -u|--uncomment)
        uncomment_tags=${2}
        shift
      ;;
      -i|--input)
        input_file=${2}
        shift
      ;;
      -q|--quite)
        flag_suppress_comment_info="true"
        flag_suppress_modified_info="true"
        flag_suppress_unrecognized_info="true"
      ;;
      -m|--modify)
        true
      ;;
      --)
        shift
        modify_tags=$@
        # echo ${modify_tags}
        # read -p "wait"
        break
      ;;
      *)
        echo "$1 is not a recognized option!"
        exit 1
      ;;
    esac
    shift
  done
}

print_help(){
  cat << EOF
Description:

  descibe main functions

Usage: 

  ${script_name} [OPTION] [PARAMETER]

Option:

  -h, --help                   show this help
  -v, --version                print version
  -c, --comment "tags"         comment tags
  -u, --uncomment "tags"       uncomment tags
  -m, --modify "tag=value"     modify tags, ${script_name}'s default behavior
                               Caution: tags must be separated by ',' or ';'
  -i, --input <file>           specify input file
  -q, --quite                  suppress result printing

Example:
  comment tags
    ${script_name} -c "ENCUT, PREC"
  uncomment a tag without printing info
    ${script_name} -u "ENCUT"
  modify tags to desired value
    ${script_name} [-m] "ENCUT=500, EDIFF = 1E-08; EDIFFG= -1E-04"

EOF
}

print_version(){
  cat << EOF
  ${script_name} ${version_number}
EOF
}

check_input_file(){
  if [ ! -f ${input_file} ]; then
    echo "Input file not found!"
    exit 1
  fi
}

comment_tag(){
  comment_tags=$@
  # 对comment_tags简单处理，去除掉多余逗号','、分号';'、空格' '
  comment_tags=$(echo ${comment_tags} | awk -F'[,; ]+' '{ count=0;while(count<NF){count++; print $count} }')

  for tag in ${comment_tags}; do

    target_line=$( sed -n -e "/^ *${tag} *=/p" ${input_file} )
    # 当找不到tag时，将此tag加入INCAR
    if [ -z "${target_line}" ]; then
      missing_comment_tags="${missing_comment_tags}, ${tag}"
      continue
    fi

    # sed -n -e "/^ *${tag}/s/^/# /" -e "/${tag}/p" ${input_file}
    # '/pattern/'找到开头'^'有0或n个空格' *'，包含tag'${tag}', 之后有0或n个空格' *'， 最后有个等号'='的行
    # 在开头'^'加上'# '
    sed -i -e "/^ *${tag} *=/s/^/# /" ${input_file}
    [ "${flag_suppress_comment_info}" == "false" ] && sed -n -e "/^# *${tag} *=/p" ${input_file}
  done
}

uncomment_tag(){
  uncomment_tags=$@
  uncomment_tags=$(echo ${uncomment_tags} | awk -F'[,; ]+' '{ count=0;while(count<NF){count++; print $count} }')
  
  for tag in ${uncomment_tags}; do

    target_line=$( sed -n -e "/^ *[#!]\{1,\} *${tag} *=/p" ${input_file} )
    # 当找不到tag时，将此tag加入INCAR
    if [ -z "${target_line}" ]; then
      missing_uncomment_tags="${missing_uncomment_tags}, ${tag}"
      continue
    fi
    # sed -n -e "/^ *#\{1,\} *${tag} \{0,\}=/s/^ *#* *//" -e "/${tag} \{0,\}=/p" ${input_file}
    # '/pattern/'找到开头'^'有0或n个空格' *'，至少1个#或!'[#!]\{1,\}'，紧跟0或n个空格' *'，包含有tag‘${tag}‘，之后又有0或n个空格，最后有1个等号'='的行
    # s/old/new/将tag前的'^'多余的空格' *'和井号或感叹号'[#!]'去掉
    sed -i -e "/^ *[#!]\{1,\} *${tag} *=/s/^ *[#!]\{1,\} *//" ${input_file}

    # 若没使用-q, --quite则打印信息
    [ "${flag_suppress_comment_info}" == "false" ] && sed -n -e "/${tag} *=/p" ${input_file}
  done
}

core_uncomment_tag(){
  core_uncomment_tags=$@
  core_uncomment_tags=$(echo ${core_uncomment_tags} | awk -F'[,; ]+' '{ count=0;while(count<NF){count++; print $count} }')
  
  for tag in ${core_uncomment_tags}; do

    # sed -n -e "/^ *#\{1,\} *${tag} \{0,\}=/s/^ *#* *//" -e "/${tag} \{0,\}=/p" ${input_file}
    # '/pattern/'找到开头'^'有0或n个空格' *'，至少1个#或!'[#!]\{1,\}'，紧跟0或n个空格' *'，包含有tag‘${tag}‘，之后又有0或n个空格，最后有1个等号'='的行
    # s/old/new/将tag前的'^'多余的空格' *'和井号或感叹号'[#!]'去掉
    sed -i -e "/^ *[#!]\{1,\} *${tag} *=/s/^ *[#!]\{1,\} *//" ${input_file}

  done
}

# refine_tag(){
#   # specify option string for short/long options
#   short_options="k,v"
#   long_options="key,value"

#   # analyse options 
#   arguments=$(getopt -n ${script_name} --options ${short_options} \
#     --longoptions ${long_options} -- "$@")
#   # exit if an error occur in last command 
#   [ $? -ne 0 ] && exit 1

#   eval set -- "${arguments}"

#   while [ -n "$1" ]; do
#     case $1 in
#       -k|--key|--keys)
#         flag_refine="key"
#       ;;
#       -v|--value|-values)
#         flag_refine="value"
#       ;;
#       --)
#         shift
#         keys_values=$@
#         break
#       ;;
#       *)
#         # echo "$1 is not a recognized option!"
#         exit 1
#       ;;
#     esac
#     shift
#   done

#   case ${flag_refine} in 
#     key)
#       field=1
#     ;;
#     value)
#       field=2
#     ;;
#     *)
#       exit 1
#     ;;
#   esac

#   echo ${keys_values} | \
#     awk -F'[,;]+' '{ count=0; while( count < NF ){count++; print $count} }' | \
#     sed -e 's/ *= */=/g' -e 's/^ *//' -e 's/ *$//' | \
#     awk -F= -v field=${field} '{print $field}'| \
#     sed 's/ /~/g'
# }

tag_str_2_array(){
  # echo ${modify_tags}
  keys_array=( $( refine_tags --key "${modify_tags}" ) )
  # echo ${keys_array[@]}
  values_array=( $( refine_tags --value "${modify_tags}" ) )
  # echo ${values_array[@]}

  array_highest_index=$(( ${#keys_array[@]} -1 ))
  # echo ${array_highest_index}
  # unset modify_tags
  # echo ${modify_tags[@]}
}

modify_tag(){
  # 取消注释要修改的tag，临时不打印信息
  flag_suppress_comment_info="true"
  core_uncomment_tag ${keys_array[@]}

  # 遍历所有tag，并修改值
  for index in $(seq 0 ${array_highest_index}); do
    # tag=${keys_array[${index}]}
    tag=$( echo ${keys_array[${index}]} | sed -e "s/'//g" -e 's/~/ /g' )
    # echo $tag
    # exit
    value=$( echo ${values_array[${index}]} | sed -e "s/'//g" -e 's/~/ /g' )

    comment=""
    
    target_line=$( sed -n -e "/^ *${tag} *=/p" ${input_file} )
    # 当找不到tag时，将此tag加入INCAR
    if [ -z "${target_line}" ]; then
      echo "${tag} = " >> ${input_file}
      missing_modify_tags="${missing_modify_tags}, ${tag}"
      if [ "${flag_suppress_modified_info}" != "true" ]; then
        comment="# Added by ${script_name}"
      fi
    else
      # 如果有tag，则尝试找出行内注释。 awk 的 NF 代表 字段field 的数量
      comment=$( echo ${target_line} | \
                awk -F# '{ count=1; while(count < NF){count++; printf "#" $count } }' )
    fi

    # 修改tag的值
    sed -i -e "/^ *${tag} *=/c${tag} = ${value}  ${comment}" ${input_file}
    # sed -n -e "/^ *${tag} *=/p" ${input_file}

    # [ "${flag_suppress_comment_info}" == "false" ] && sed -n -e "/${tag} *=/p" ${input_file}
    # read -p "wait"
  done

  # 如果没有使用了-q,--quite则打印更改后的信息
  if [ "${flag_suppress_modified_info}" != "true" ]; then
    for index in $(seq 0 ${array_highest_index}); do
      tag=${keys_array[${index}]}
      sed -n -e "/^ *${tag} *=/p" ${input_file}
    done
  fi
}

print_unrecognized_tag(){

  # 如果使用了-q, --quite则不打印
  [ "${flag_suppress_unrecognized_info}" == "true" ] && return
  
  # 只有真的有无法识别的tags时才打印提示信息
  if [ -n "${missing_comment_tags}" ]; then
    # 简单处理，去掉开头的', ''
    missing_comment_tags=$(echo ${missing_comment_tags} | sed 's/^, //')
    echo "Not found or already commented:"
    echo "   ${missing_comment_tags}"
  fi

  if [ -n "${missing_uncomment_tags}" ]; then
    missing_uncomment_tags=$(echo ${missing_uncomment_tags} | sed 's/^, //')
    echo "Not found or already uncommented:"
    echo "   ${missing_uncomment_tags}"
  fi

  if [ -n "${missing_modify_tags}" ]; then
    missing_modify_tags=$(echo ${missing_modify_tags} | sed 's/^, //')
    echo "Not found and add by ${script_name}:"
    echo "   ${missing_modify_tags}"
  fi
}

# ========== main program =============

get_tags ${arguments}

check_input_file

comment_tag ${comment_tags}

uncomment_tag ${uncomment_tags}

tag_str_2_array
modify_tag

print_unrecognized_tag

################################ Debug Console ################################
# Read commands but do not execute them.
# set -n

# Print commands and their arguments as they are executed
# set -x


# Treat unset variables as an error when substituting.
set -u

# Exit immediately if a command exits with a non-zero status.
set -e

# Set the variable corresponding to option-name:
# -o pipefail: the return value of a pipeline is the status of the last
#              command to exit with a non-zero status, or zero if no
#              command exited with a non-zero status
set -o pipefail

