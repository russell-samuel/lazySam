#!/bin/bash

#================ log ======================
version_number="0.0.1"

# 0.0.1
#

#============== variable ===================
script_name=$(basename -s .sh $0)

flag_refine="key"

# specify option string for short/long options
short_options="h,V,k,v"
long_options="help,version,key,value"

# analyse options 
arguments=$(getopt -n ${script_name} --options ${short_options} \
  --longoptions ${long_options} -- "$@")
# exit if an error occur in last command 
[ $? -ne 0 ] && exit 1

# eval set -- "${arguments}"

#============= function ====================

get_tags(){
  eval set -- "$@"
  while [ -n "$1" ]; do
    case $1 in
      -h|--help)
        print_help
        exit 0
      ;;
      -V|--version)
        print_version
        exit 0
      ;;
      -k|--key|--keys)
        flag_refine="key"
      ;;
      -v|--value|-values)
        flag_refine="value"
      ;;
      --)
        shift
        keys_values=$@
        break
      ;;
      *)
        # echo "$1 is not a recognized option!"
        exit 1
      ;;
    esac
    shift
  done
}


print_help(){
  cat << EOF
Description:

  descibe main functions

Usage: 

  ${script_name} [OPTION] [PARAMETER]

Option:

  -h, --help        show this help
  -V, --version     print version
  -k, --key         refine keys 
  -v, --value       refine values

EOF
}

print_version(){
cat << EOF
  ${script_name} ${version_number}
EOF
}

check_input(){
  if [ "${flag_refine}" == "value" ] && [ -z "${keys_values}" ] 
  then
    print_help
    echo "${script_name} use '-V', '--version' to print version info; '-v', '--value' to refine tags' value" 
  fi
}

set_tag(){
  case ${flag_refine} in 
    key)
      field=1
    ;;
    value)
      field=2
    ;;
    *)
      exit 1
    ;;
  esac
}

refine_tag(){
  echo ${keys_values} | \
  awk -F'[,;]+' '{ count=0; while( count < NF ){count++; print $count} }' | \
  sed -e 's/ *= */=/g' -e 's/^ *//' -e 's/ *$//' | \
  awk -F= -v field=${field} '{print $field}'| \
  sed 's/ /~/g'
  # echo ${keys_values} | sed 's/#/,#/g' | \
  # awk -F'[,;]+' '{ count=0; while( count < NF ){count++; print $count} }' | \
  # sed -e 's/ *= */=/g' -e 's/^ *//' -e 's/ *$//' | \
  # awk -F= -v field=${field} '{print $field}'| \
  # sed 's/ /~/g'
}

#============ main function =============

get_tags ${arguments}

check_input

set_tag

refine_tag

################################ Debug Console ################################
# Read commands but do not execute them.
# set -n

# Print commands and their arguments as they are executed
# set -x


# Treat unset variables as an error when substituting.
set -u

# Exit immediately if a command exits with a non-zero status.
set -e

# Set the variable corresponding to option-name:
# -o pipefail: the return value of a pipeline is the status of the last
#              command to exit with a non-zero status, or zero if no
#              command exited with a non-zero status
set -o pipefail

