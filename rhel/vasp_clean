#!/bin/bash

helpdoc(){
  cat << EOHELP
Description:

  A simple script that help you clean VASP intermediate data files

Usage: 

  $(echo $0 | awk -F/ '{print $NF}') [-p <path-to-clean>]

Option:

  -h    show this help
  -v    print version
  -p    path to clean

EOHELP
}

while getopts "hvp::" opt
do
  case ${opt} in
    h )
      helpdoc
      exit 0
    ;;
    v )
      echo "vasp_clean  0.1.0"
      exit 0
    ;;
    p)
      clean_path=${OPTARG}
    ;;
    ?)
      echo "ERROR: Containing unrecognized option"
      exit 1
    ;;
  esac
done

files="CHG CHGCAR CONTCAR STOPCAR DOSCAR \
       DYNMAT EIGENVAL IBZKPT OPTIC OSZICAR \
       OUTCAR PROCAR PCDAT WAVECAR XDATCAR \
       PARCHG vasprun.xml REPORT wannier90.win \
       wannier90_band.gnu wannier90_band.kpt \
       wannier90.chk wannier90.wout vaspout.h5 \
       PENALTYPOT HILLSPOT ML_LOGFILE ML_ABN "
       #*.err *.out

set_clean_path(){
  # Which folder and its subfolders to be clean
  if [ -z ${clean_path} ]; then
    echo "WARNINIG: subfolders will also be included!"
    echo
    read -p "Clean Path (default: './'): " clean_path
    if [ -z ${clean_path} ]; then
      clean_path="./"
    fi
  fi

  echo
  echo "Path to clean: ${clean_path}"
  echo
}

clean_files(){
  for file in ${files}; do
    echo "Cleaning ${file} ..."
    find ${clean_path} -type f -name ${file} -exec rm -f {} \;
  done

  echo
  echo "All done!"
}

set_clean_path
clean_files

echo "
---------- Storage Usage ----------"
# echo $(du -sh ${clean_path})
du -sh ${clean_path}
# du -sh "/data/home/$USER"

################################ Debug Console ################################
# Read commands but do not execute them.
# set -n

# Print commands and their arguments as they are executed
# set -x


# Treat unset variables as an error when substituting.
set -u

# Exit immediately if a command exits with a non-zero status.
set -e

# Set the variable corresponding to option-name:
# -o pipefail: the return value of a pipeline is the status of the last
#              command to exit with a non-zero status, or zero if no
#              command exited with a non-zero status
set -o pipefail

