#!/bin/bash

max_np=4

force_np='false'
input_np=0

short_opts='F,h,V,f:,n:'
long_opts='help,version,genv:,genvlist:,genvnone,genvall,hosts:,rankmap:,wdir:,configfile:,env:,envlist:,envnone,envall,np:,launcher,launcher-exec,enable-x,disalbe-x,rmk,topolib,bind-to,map-by,membind,demux,disable-auto-cleanup,disable-hostname-propagation,errfile-pattern,gpus-per-proc,hybrid-hosts,iface,info,localhost,nameserver,order-nodes,outfile-pattern,pmi-port,ppn,prepend-pattern,prepend-rank,print-all-exitcodes,profile,skip-launch-node,usize,verbose'
#long_opts='np:,help'
args=$(getopt -a -n 'mpirun' -o $short_opts -l $long_opts -- "$@")
[ $? -ne 0 ] && exit 1
eval set -- "$args"
#echo $args

opts=''
while [ -n "$1" ]; do
  case $1 in
    -h|--help|-V|--version|--genvnone|--genvall|--envnone|--envall|\
    --launcher|--launcher-exec|--enable-x|--disalbe-x|\
    --rmk|\
    --topolib|--bind-to|--map-by|--membind|\
    --demux|\
    --disable-auto-cleanup|--disable-hostname-propagation|\
    --errfile-pattern|--gpus-per-proc|--hybrid-hosts|\
    --iface|--info|--localhost|--nameserver|--order-nodes|\
    --outfile-pattern|--pmi-port|--ppn|--prepend-pattern|\
    --prepend-rank|--print-all-exitcodes|--profile|\
    --skip-launch-node|--usize|--verbose)
      opts="$opts $1"
    ;;
    --genv|--env)
      echo "Currently NOT supported! Use 'realmpirun' instead!"
      exit 2
    ;;
    --genlist|-f|--hosts|--rankmap|--wdir|--configfile|--envlist)
      opts="$opts ${1//--/-} $2"
      shift
    ;;
    -F) force_np='true' ;;
    -n|--np)
      input_np=$2
      opts="$opts ${1//--/-} num_of_procs"
      shift
    ;;
    --)
      shift
      paras=$@
      break
    ;;
    *)
      echo "'$1' is not a recognized option"
      exit 1
    ;;
  esac
  shift
done

if [ "$force_np" == 'true' ]; then
  np=$input_np
elif [ $input_np -lt $max_np ]; then
  np=$input_np
else
  np=$max_np
fi
opts=$( echo $opts | sed "s/num_of_procs/$np/" )

mpiexec.hydra $opts $paras


################################ Debug Console ################################
# Read commands but do not execute them.
# set -n

# Print commands and their arguments as they are executed
# set -x


# Treat unset variables as an error when substituting.
set -u

# Exit immediately if a command exits with a non-zero status.
set -e

# Set the variable corresponding to option-name:
# -o pipefail: the return value of a pipeline is the status of the last
#              command to exit with a non-zero status, or zero if no
#              command exited with a non-zero status
set -o pipefail

